// Generated by Pdef Objective-C generator.

#import "TestComplexMessage.h"
#import "TestMessage.h"
#import "TestMessage.h"
#import "Base.h"


@implementation TestComplexMessage
static PDMessageDescriptor *_TestComplexMessageDescriptor;

+ (PDMessageDescriptor *)typeDescriptor {
    return _TestComplexMessageDescriptor;
}

- (PDMessageDescriptor *)descriptor {
    return [TestComplexMessage typeDescriptor];
}

- (BOOL)isEqualToMessage:(PDMessage *)message {
    if (self == message)
        return YES;
    if (message == nil)
        return NO;
    if (![[message class] isEqual:[self class]])
        return NO;
    if (![super isEqualToMessage:message])
        return NO;

    TestComplexMessage *cast = (TestComplexMessage *)message;
    if (self.short0 != cast.short0 && ![self.short0 isEqual:cast.short0])
        return NO;
    if (self.long0 != cast.long0 && ![self.long0 isEqual:cast.long0])
        return NO;
    if (self.float0 != cast.float0 && ![self.float0 isEqual:cast.float0])
        return NO;
    if (self.double0 != cast.double0 && ![self.double0 isEqual:cast.double0])
        return NO;
    if (self.datetime0 != cast.datetime0 && ![self.datetime0 isEqual:cast.datetime0])
        return NO;
    if (self.list0 != cast.list0 && ![self.list0 isEqual:cast.list0])
        return NO;
    if (self.set0 != cast.set0 && ![self.set0 isEqual:cast.set0])
        return NO;
    if (self.map0 != cast.map0 && ![self.map0 isEqual:cast.map0])
        return NO;
    if (self.enum0 != cast.enum0)
        return NO;
    if (self.message0 != cast.message0 && ![self.message0 isEqual:cast.message0])
        return NO;
    if (self.polymorphic != cast.polymorphic && ![self.polymorphic isEqual:cast.polymorphic])
        return NO;
    if (self.datatypes != cast.datatypes && ![self.datatypes isEqual:cast.datatypes])
        return NO;
    return YES;
}

- (NSUInteger)hash {
    NSUInteger hash = [super hash];
    hash = hash * 31u + [self.short0 hash];
    hash = hash * 31u + [self.long0 hash];
    hash = hash * 31u + [self.float0 hash];
    hash = hash * 31u + [self.double0 hash];
    hash = hash * 31u + [self.datetime0 hash];
    hash = hash * 31u + [self.list0 hash];
    hash = hash * 31u + [self.set0 hash];
    hash = hash * 31u + [self.map0 hash];
    hash = hash * 31u + (NSUInteger) self.enum0;
    hash = hash * 31u + [self.message0 hash];
    hash = hash * 31u + [self.polymorphic hash];
    hash = hash * 31u + [self.datatypes hash];
    return hash;
}

- (id)copyWithZone:(NSZone *)zone {
    TestComplexMessage *copy = (TestComplexMessage *)[super copyWithZone:zone];

    if (copy != nil) {
        copy.short0 = _short0;
        copy.long0 = _long0;
        copy.float0 = _float0;
        copy.double0 = _double0;
        copy.datetime0 = _datetime0;
        copy.list0 = (_list0) ? [_list0 copy] : nil;
        copy.set0 = (_set0) ? [_set0 copy] : nil;
        copy.map0 = (_map0) ? [_map0 copy] : nil;
        copy.enum0 = _enum0;
        copy.message0 = (_message0) ? [_message0 copy] : nil;
        copy.polymorphic = (_polymorphic) ? [_polymorphic copy] : nil;
        copy.datatypes = (_datatypes) ? [_datatypes copy] : nil;
    }

    return copy;
}

+ (void)initialize {
    if (self != [TestComplexMessage class]) {
        return;
    }

    _TestComplexMessageDescriptor = [[PDMessageDescriptor alloc]
            initWithClass:[TestComplexMessage class]
                     base:[TestMessage typeDescriptor]
       discriminatorValue:0
         subtypeSuppliers:@[]
                   fields:@[
    [[PDFieldDescriptor alloc] initWithName:@"short0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors int16]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"long0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors int64]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"float0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors float0]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"double0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors double0]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"datetime0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors datetime]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"list0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors listWithElement:[PDDescriptors int32]]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"set0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors setWithElement:[PDDescriptors int32]]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"map0" typeSupplier:^PDDataTypeDescriptor *() { return [PDDescriptors mapWithKey:[PDDescriptors int32] value:[PDDescriptors float0]]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"enum0" typeSupplier:^PDDataTypeDescriptor *() { return TestEnumDescriptor(); } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"message0" typeSupplier:^PDDataTypeDescriptor *() { return [TestMessage typeDescriptor]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"polymorphic" typeSupplier:^PDDataTypeDescriptor *() { return [Base typeDescriptor]; } discriminator:NO],
    [[PDFieldDescriptor alloc] initWithName:@"datatypes" typeSupplier:^PDDataTypeDescriptor *() { return [TestComplexMessage typeDescriptor]; } discriminator:NO],
                           ]];
}
@end


