// Generated by Pdef Objective-C generator.

#import "{{ definition.name }}.h"
{% for type0 in definition.referenced_types %}
    {% if type0.is_message or type0.is_interface %}
#import "{{ type0.name }}.h"
    {% endif %}
{% endfor %}


{% if definition.is_enum %}
// {{ definition.name }} enum descriptor
static dispatch_once_t _{{ definition.name }}Once;
static PDEnumDescriptor *_{{ definition.name }}Descriptor;
PDEnumDescriptor *{{ definition.name }}Descriptor() {
    dispatch_once(&_{{ definition.name }}Once, ^() {
        _{{ definition.name }}Descriptor = [[PDEnumDescriptor alloc] initWithNumbersToNames:@{
            {% for value in definition.values %}
                @({{ loop.index }}): @"{{ value.name }}",
            {% endfor %}
        }];
    });
    return _{{ definition.name }}Descriptor;
}


{% elif definition.is_message %}
@implementation {{ definition.name }} {
    {% for field in definition.declared_fields %}
    BOOL _{{ field.name }}_isset;
    {% endfor %}
}
static PDMessageDescriptor *_{{ definition.name }}Descriptor;

{% if definition.discriminator_value %}
- (id) init {
    if (self = [super init]) {
        self.{{ definition.discriminator.name }} = {{ definition.discriminator_value|objc_type }};
    }
    return self;
}

{% endif -%}
{% for field in definition.declared_fields %}
// {{ field.name }}
- (BOOL)has{{ field.name|upper_first }} {
    return _{{ field.name }}_isset;
}

- (void)set{{ field.name|upper_first }}:({{ field.type|objc_type }}){{ field.name }} {
    _{{ field.name }} = {{ field.name }};
    _{{ field.name }}_isset = YES;
}

- (void)clear{{ field.name|upper_first }} {
    {% if not field.type.is_enum %}
    _{{ field.name }} = nil;
    {% endif %}
    _{{ field.name }}_isset = NO;
}

{% endfor %}

- (PDMessageDescriptor *)descriptor {
    return [{{ definition.name }} typeDescriptor];
}

+ (PDMessageDescriptor *)typeDescriptor {
    return _{{ definition.name }}Descriptor;
}

+ (void)initialize {
    if (self != [{{ definition.name }} class]) {
        return;
    }

    _{{ definition.name }}Descriptor = [[PDMessageDescriptor alloc]
            initWithClass:[{{ definition.name }} class]
                     base:{% if definition.base -%}
                              {{ definition.base|objc_descriptor }}
                          {% else -%}
                              nil
                          {% endif %}
       discriminatorValue:{% if definition.discriminator_value -%}
                              {{ definition.discriminator_value|objc_type }}
                          {% else -%}
                              0
                          {% endif %}
    {% if definition.subtypes %}
         subtypeSuppliers:@[
                {% for subtype in definition.subtypes %}
                           ^PDMessageDescriptor *() { return {{ subtype|objc_descriptor }}; },
                {% endfor %}
                          ]
    {% else %}
         subtypeSuppliers:@[]
    {% endif %}
                   fields:@[
                {% for field in definition.declared_fields %}
    [[PDFieldDescriptor alloc] initWithName:@"{{ field.name }}" typeSupplier:^PDDataTypeDescriptor *() { return {{ field.type|objc_descriptor }}; } discriminator:{{ field.is_discriminator|objc_bool }}],
                {% endfor %}
                           ]];
}
@end


{% else %}
#pragma mark {{ definition.name }} client
@implementation {{ definition.name }}Client

{% for method in definition.declared_methods %}
    {% if not method.args %}
        {% if method.is_terminal %}
- ({{ method.result|objc_result }}) {{ method.name }}Response:(void (^)(id result, NSError *error))response {
        {% else %}
- ({{ method.result|objc_result }}) {{ method.name }} {
        {% endif %}
    {% else %}
        {% set first_arg = method.args[0] %}
        {% set remaining_args = method.args[1:] %}
- ({{ method.result|objc_result }}) {{ method.name }}{{ first_arg.name|upper_first }}:({{ first_arg.type|objc_type }}){{ first_arg.name }}
    {% for arg in remaining_args %}
        {{ arg.name }}:({{ arg.type|objc_type }}){{ arg.name }}
    {% endfor %}
        {%- if not method.is_terminal -%}
            {
        {% else %}
        response:(void (^)(id result, NSError *error))response {
        {% endif %}
    {% endif %}
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"{{ method.name }}"]
                         args:@{
                             {% for arg in method.args %}
                                 @"{{ arg.name }}" : {{ arg.name }},
                             {% endfor %}
                         }];
    {% if method.is_terminal %}
    return [self.handler handleInvocation:_invocation response:response];
    {% else %}
    return [[{{ method.result.name }}Client alloc] initWithHandler: self.handler parentInvocation:_invocation];
    {% endif %}
}
{% endfor %}

- (PDMethodDescriptor *)getMethodForName:(NSString *)name {
    return [{{ definition.name }}Descriptor() getMethodForName:name];
}
@end


#pragma mark {{ definition.name }} descriptor
static dispatch_once_t {{ definition.name }}Once;
static PDInterfaceDescriptor *_{{ definition.name }}Descriptor;

PDInterfaceDescriptor *{{ definition.name }}Descriptor() {
    dispatch_once(&{{ definition.name }}Once, ^() {
        _{{ definition.name }}Descriptor = [[PDInterfaceDescriptor alloc]
                initWithProtocol:@protocol({{ definition.name }})
                            {% if definition.exc %}
                             exc:{{ definition.exc|objc_descriptor }}
                            {% else %}
                             exc:nil
                            {% endif %}
                         methods:@[
{% for method in definition.declared_methods %}
     [[PDMethodDescriptor alloc]
             initWithName:@"{{ method.name }}"
           resultSupplier:^PDDescriptor *() { return {{ method.result|objc_descriptor }}; }
                    {% if method.args %}
                     args:@[
                        {% for arg in method.args %}
           [[PDArgumentDescriptor alloc] initWithName:@"{{ arg.name }}" type: {{ arg.type|objc_descriptor }} post:{{ arg.is_post|objc_bool }} query:{{ arg.is_query|objc_bool }}],
                        {% endfor %}
                        ]
                    {% else %}
                     args:@[]
                    {% endif %}
                     post:{{ method.is_post|objc_bool }}],
{% endfor %}
                         ]];
    });
    return _{{ definition.name }}Descriptor;
}
{% endif %}
